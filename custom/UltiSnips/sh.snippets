snippet f "minimal bash function POSIX style" b
${1:function_name}() {
	${2:#function_body}
}
endsnippet

snippet isf "is it a file? complain if not"
[[ -f "$${1:VAR}" ]] || { log_error "no file: $1 ($$1)"; ${2:return 2;}}
endsnippet

snippet silent "Description" 
>/dev/null 2>&1 
endsnippet

snippet vv "quoted variable" i
"$${1:VAR}"
endsnippet

snippet lwd "lwd" i
"$layout_working_dir"
endsnippet

snippet tsm "TS lib module" i
"$MOD_TS_LIB"
endsnippet
snippet tsd "TS dir" i
"$TS_DIR"
endsnippet

snippet testvar "Description" i
[[ ${2:-${1:n}} "$${3:VAR}" ]]
endsnippet

snippet testarg "is it a xyz? complain if not"
[[ -${1:n} "$${2:VAR}" ]] || { log_error "did not pass test -$1: $2 '$$2'"; ${3:return 1;}}
endsnippet

snippet ifvar "test var? complain if not"
if [[ -${1:n} "$${2:VAR}" ]]; then
	${4:#code}
else
	log_error "did not pass test -$1: $2 '$$2'"; ${3:return 1;}
fi
endsnippet

snippet varlog "describes and puts a variable in a string" i
${1:VAR}: '$$1'
endsnippet

snippet dirarg "tests a variable if it is a directory, assigns it or a default variable ifd they exist, else fails." b
if [[ -n "$${1:1}" ]]; then
	if [[ -d "$$1" ]]; then
		local ${3:dir}="$$1"
	else
		log_error "did not pass test -d: arg '$$1'"; return 1;
	fi
else
	if [[ -n "$${2:layout_working_$3}" ]]; then
		local $3="$$2"
	else
		log_error "did not pass test -n: lwd '$$2'"; return 1;
	fi
fi
endsnippet

snippet modd "module dir trunk" i
"$module_dir_${1:cfg}"
endsnippet

snippet aliasfun "Description" b
${1:delegate}() {
	${2:delegatee} "$@"
}
endsnippet

snippet prtv "printf template" i
printf '$2${1:%s}\n' "$${3:var}"
endsnippet

snippet prtq "printf template quoted" i
printf "$2${1:%s}\\\\n" "$${3:var}"
endsnippet

snippet arr "array indexed" i
${${1:name}[${2:@}]}
endsnippet
snippet arrq "array indexed quoted"
${${1:name}[${2:@}]}
endsnippet

snippet forarr "array indexed" b
for ${1:elem} in "${${2:name}[@]}"; do
	${3:# body with arrq}
done
endsnippet

snippet srcdir "gets the current source's dir" b
${1:DIR}="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
endsnippet

snippet dbg "debugs a pipe"
| errortee ${1:0} "[${2:tag}]" 
endsnippet

snippet funval "evaluate a function" i
"$( ${1:fun} ${2:})"
endsnippet

snippet tsscript "initialize a touchstone-enabled script" b
#!/usr/bin/env bash
eval "$(stdlib_bootstrap)"
endsnippet

snippet tss "header of ts script" b
#!/usr/bin/env bash
# DEBUG_BUILD=0
# DEBUG_LAYOUTINIT=0
# DEBUG_LAYOUTSOURCING=0
# DEBUG_LAYOUTEVAL=0
# DEBUG_LOGGED=0
# DEBUG_TSB=0

eval "$(tsb -s)"
endsnippet

snippet readargs "readargs invoc with error handling" b
local ${1:varname}
$1="$( argsfwd :: -${2:v} ${4:--${3:$1}} ${5:__required} :: readargs "$@" )" || return 1;
endsnippet
snippet readarg "readargs invoc without the error handling but its in one line" b
local ${1:varname}="$( argsfwd :: -${2:v} ${4:--${3:$1}} ${5:__required} :: readargs "$@" )"
endsnippet

snippet vset "if a variable is set while possibly empty" i
-n "${${1:1}+set}"
endsnippet
snippet vuset "if a variable is unset while possibly empty" i
-z "${${1:1}+set}"
endsnippet

snippet clip "pipe end to xclip system clipboard"
| xclip -selection clipboard
endsnippet

snippet contains "Description" b
contains "${2:$${1:element}}" "${${3:array}[@]}"
endsnippet

snippet hereapp "Description" b
here_append '$1'
endsnippet
snippet hereprep "Description" b
here_prepend '$1'
endsnippet
snippet reqtsb "require TSB file or other +x or sh function that produces code" i
runtime_require_stdout "$1"
endsnippet
snippet reqshenv "require shellenv layout" i
runtime_require_shellenv ${1:interactive} "${2:dir}"
endsnippet
snippet reqlay "require layout" i
runtime_require_layout_init ${1:context} "${2:dir}"
endsnippet
snippet tsb "invoke tsb, e.g. from within a script. default flag: barebone stdlib" b
eval "$(tsb ${1:-S})"
endsnippet

snippet modf "module function" b
${1:modname}() {
	local context="\$1"
	getmodeval -c "$context" "$(getmod --modname "$1")" "$@"
}
endsnippet

snippet addrec "add recursive shellenv entry" b
shellenv_add_recursive_entry ${1:"./"} shellenv_${2:interactive} "$mod_${3:catkin}_root"
endsnippet


snippet comp "composure metadata" b
author 'Simon Leischnig'
about '$1'
param '$2'
example ''
group '$3'
helppath ''
url ''
endsnippet
